
/// Map deep get
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value
//@function map-deep-get($map, $keys...) {
@function map-deep-get($map, $keys) {
    @each $key in $keys {
      $map: map-get($map, $key);
    }
    @return $map;
}

/* @include setFont(('article', 'title')); */
@mixin setFont($keys, $styles: $text-styles) {
  color: map-deep-get($styles, append($keys, 'color'));
  font-family: map-deep-get($styles, append($keys, 'font-family'));
  font-size: map-deep-get($styles, append($keys, 'font-size'));
  @include rem(font-size, map-deep-get($styles, append($keys, 'font-size-rem')));
  font-style: map-deep-get($styles, append($keys, 'font-style'));
  font-weight: map-deep-get($styles, append($keys, 'font-weight'));
  height: map-deep-get($styles, append($keys, 'height'));
  letter-spacing: map-deep-get($styles, append($keys, 'letter-spacing'));
  line-height: map-deep-get($styles, append($keys, 'line-height'));
  @include rem(line-height, map-deep-get($styles, append($keys, 'line-height-rem')));
  margin-top: map-deep-get($styles, append($keys, 'margin-top'));
  text-decoration: map-deep-get($styles, append($keys, 'text-decoration'));
  text-transform: map-deep-get($styles, append($keys, 'text-transform'));
}

$rem-baseline: 16px !default;
$rem-fallback: true !default;
$rem-px-only: false !default;

// list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
@function rem-separator($list) {
  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / ($rem-baseline / 1rem), $separator);
    } @else if type-of($value) == "list" {
      $result: append($result, rem-convert($to, $value...), $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}
  